apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: "2021-01-25T16:52:58Z"
  generation: 2
  labels:
    app: adaptation
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:app: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:annotations:
              .: {}
              f:prometheus.io/path: {}
              f:prometheus.io/port: {}
              f:prometheus.io/scrape: {}
            f:labels:
              .: {}
              f:app: {}
          f:spec:
            f:containers:
              k:{"name":"icap-service"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"MBPassword"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"MBUsername"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                f:envFrom: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":1344,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                  k:{"containerPort":1345,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/usr/local/c-icap/cert"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/usr/local/c-icap/conf"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/usr/local/c-icap/rebuild"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/var/source"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/target"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
              k:{"name":"icap-service-metrics-exporter"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"ICAP_HOST"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ICAP_PORT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"METRICS_PORT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"SERVICE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":8081,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:imagePullSecrets:
              .: {}
              k:{"name":"adaptation-registry-credential"}:
                .: {}
                f:name: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"c-icap-conf-vol"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
              k:{"name":"gw-rebuild-conf-vol"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
              k:{"name":"source-vol"}:
                .: {}
                f:name: {}
                f:persistentVolumeClaim:
                  .: {}
                  f:claimName: {}
              k:{"name":"target-vol"}:
                .: {}
                f:name: {}
                f:persistentVolumeClaim:
                  .: {}
                  f:claimName: {}
              k:{"name":"tls-config-vol"}:
                .: {}
                f:name: {}
                f:secret:
                  .: {}
                  f:defaultMode: {}
                  f:secretName: {}
    manager: Go-http-client
    operation: Update
    time: "2021-01-25T16:52:58Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"icap-service-metrics-exporter"}:
                f:resources:
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
    manager: kubectl
    operation: Update
    time: "2021-01-25T17:04:09Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-01-25T17:04:11Z"
  name: icap-service
  namespace: icap-adaptation
  resourceVersion: "1717132"
  selfLink: /apis/apps/v1/namespaces/icap-adaptation/deployments/icap-service
  uid: cb50963f-9e7b-4907-ba80-838f0cae065e
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: adaptation
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: adaptation
    spec:
      containers:
      - env:
        - name: MBUsername
          valueFrom:
            secretKeyRef:
              key: username
              name: rabbitmq-service-default-user
        - name: MBPassword
          valueFrom:
            secretKeyRef:
              key: password
              name: rabbitmq-service-default-user
        envFrom:
        - configMapRef:
            name: icap-service-config
        - configMapRef:
            name: icap-proxy-app-config
        image: glasswallsolutions/mvp-icap-service:develop-6b9efa8
        imagePullPolicy: IfNotPresent
        name: icap-service
        ports:
        - containerPort: 1344
          protocol: TCP
        - containerPort: 1345
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/source
          name: source-vol
        - mountPath: /var/target
          name: target-vol
        - mountPath: /usr/local/c-icap/cert
          name: tls-config-vol
          readOnly: true
        - mountPath: /usr/local/c-icap/conf
          name: c-icap-conf-vol
          readOnly: true
        - mountPath: /usr/local/c-icap/rebuild
          name: gw-rebuild-conf-vol
          readOnly: true
      - env:
        - name: ICAP_HOST
          value: localhost
        - name: ICAP_PORT
          value: "1344"
        - name: SERVICE
          value: info?view=text
        - name: METRICS_PORT
          value: "8081"
        image: glasswallsolutions/icap-service-metrics-exporter:develop-e44d5bf
        imagePullPolicy: IfNotPresent
        name: icap-service-metrics-exporter
        ports:
        - containerPort: 8081
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: adaptation-registry-credential
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: source-vol
        persistentVolumeClaim:
          claimName: glasswallsource-pvc
      - name: target-vol
        persistentVolumeClaim:
          claimName: glasswalltarget-pvc
      - name: tls-config-vol
        secret:
          defaultMode: 420
          secretName: icap-service-tls-config
      - configMap:
          defaultMode: 420
          name: c-icap-service-config
        name: c-icap-conf-vol
      - configMap:
          defaultMode: 420
          name: gw-rebuild-config
        name: gw-rebuild-conf-vol
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2021-01-25T16:53:03Z"
    lastUpdateTime: "2021-01-25T16:53:03Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2021-01-25T16:52:58Z"
    lastUpdateTime: "2021-01-25T17:04:11Z"
    message: ReplicaSet "icap-service-66d8bdf564" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 2
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
