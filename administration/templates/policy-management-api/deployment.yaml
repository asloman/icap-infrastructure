{{- $root := . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "policy-management-api.fullname" . }}-policy-api
  labels:
    app: {{ template "policy-management-api.name" . }}
    chart: {{ template "policy-management-api.chart" . }}
    draft: {{ .Values.draft | default "draft-app" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.policymanagementapi.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "policy-management-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "policy-management-api.name" . }}
        draft: {{ .Values.draft | default "draft-app" }}
        release: {{ .Release.Name }}
      annotations:
        buildID: {{ .Values.buildID | default "" | quote }}
    spec:
      serviceAccountName: policy-management-api-service-account
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "policy-management-api.fullname" $root }}-policy-configuration
      - name: policy-volume
        persistentVolumeClaim:
          claimName: pvc-policies        
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.imagestore.policymanagementapi.registry }}{{ .Values.imagestore.policymanagementapi.repository }}:{{ .Values.imagestore.policymanagementapi.tag }}"
          ports:
            - name: http
              containerPort: {{ .Values.policymanagementapi.deployment.containerPort }}
              protocol: TCP
          {{- if .Values.policymanagementapi.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          volumeMounts:
          - name: config-volume
            mountPath: /app/config
          - name: policy-volume
            mountPath: /mnt/policies
          env:
            - name: PolicyUpdateServiceUsername
              valueFrom:
                secretKeyRef:
                  name: policyupdateserviceref
                  key: username
            - name: PolicyUpdateServicePassword
              valueFrom:
                secretKeyRef:
                  name: policyupdateserviceref
                  key: password
            - name: NcfsPolicyUpdateServiceUsername
              valueFrom:
                secretKeyRef:
                  name: ncfsPolicyupdateserviceref
                  key: username
            - name: NcfsPolicyUpdateServicePassword
              valueFrom:
                secretKeyRef:
                  name: ncfsPolicyupdateserviceref
                  key: password
            {{- range $key, $value := .Values.policymanagementapi.configuration }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
            {{- $root := . }}
            {{- range $ref, $values := .Values.policymanagementapi.secrets }}
            {{- range $key, $value := $values }}
            - name: {{ $ref }}_{{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "policy-management-api.fullname" $root }}-{{ $ref | lower }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
          resources:
{{ toYaml .Values.policymanagementapi.resources | indent 12 }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.policymanagementapi.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.policymanagementapi.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.policymanagementapi.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}